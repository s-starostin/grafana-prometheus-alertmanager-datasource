{"version":3,"sources":["../src/datasource.js"],"names":["dsRegularEscape","value","replace","dsSpecialRegexEscape","_","GenericDatasource","instanceSettings","$q","backendSrv","templateSrv","type","url","name","q","severityLevels","jsonData","severity_critical","undefined","toLowerCase","severity_high","severity_warning","severity_info","query","matchedFunction","queryTypes","regex","i","length","matches","match","encodeURIComponent","interpolateQueryExpr","unique","Set","results","datasourceRequest","method","then","response","data","forEach","Object","keys","castArray","v","JSON","stringify","has","add","push","text","options","buildQueryParameters","targets","filter","t","hide","when","expr","scopedVars","labelSelector","parseLabelSelector","columnsDict","getColumnsDict","columns","getColumns","row","Array","fill","item","Date","parse","label","annotation","transform","rules","split","rulesItem","rule","s","String","RegExp","rows","now","variable","defaultFormatFn","escapedValues","map","join","column","input","trim","index","severityDefined","labelIndex","selectedLabel","status","message","title","target","targetss","refId","legendFormat","labels","aliasRegex","g1"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\r\n\r\nexport class GenericDatasource {\r\n\r\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\r\n    this.type = instanceSettings.type;\r\n    this.url = instanceSettings.url;\r\n    this.name = instanceSettings.name;\r\n    this.q = $q;\r\n    this.backendSrv = backendSrv;\r\n    this.templateSrv = templateSrv;\r\n\r\n    this.severityLevels = {}\r\n    if (instanceSettings.jsonData.severity_critical != undefined) {\r\n      this.severityLevels[instanceSettings.jsonData.severity_critical.toLowerCase()] = 4;\r\n    }\r\n    if (instanceSettings.jsonData.severity_high != undefined) {\r\n      this.severityLevels[instanceSettings.jsonData.severity_high.toLowerCase()] = 3;\r\n    }\r\n    if (instanceSettings.jsonData.severity_warning != undefined) {\r\n      this.severityLevels[instanceSettings.jsonData.severity_warning.toLowerCase()] = 2;\r\n    }\r\n    if (instanceSettings.jsonData.severity_info != undefined) {\r\n      this.severityLevels[instanceSettings.jsonData.severity_info.toLowerCase()] = 1;\r\n    }\r\n  }\r\n  metricFindQuery(query) {\r\n    let matchedFunction = {};\r\n    if(query) {\r\n      const queryTypes = [\r\n        {\r\n          type: 'names',\r\n          regex: /^(label|annotation)_names\\((.*?)\\)\\s*$/\r\n        },\r\n        {\r\n          type: 'values',\r\n          regex: /^(label|annotation)_values\\((?:(.+),\\s*)?([a-zA-Z_][a-zA-Z0-9_]*)\\)\\s*$/\r\n        },\r\n        {\r\n          type: 'key',\r\n          regex: /^(labels|annotations|receivers|generatorURL)\\((.*?)\\)\\s*$/\r\n        }\r\n      ]\r\n      for (let i = 0; i < queryTypes.length; i++) {\r\n        queryTypes[i].matches = query.match(queryTypes[i].regex)\r\n        if (queryTypes[i].matches) {\r\n          matchedFunction = queryTypes[i];\r\n          break;\r\n        }\r\n      }\r\n      if (matchedFunction.type) {\r\n        query = matchedFunction[2] || ''\r\n      }\r\n      if(query) {\r\n        query = encodeURIComponent(this.templateSrv.replace(query, {}, this.interpolateQueryExpr) || \"\");\r\n      }\r\n    }\r\n    let unique = new Set();\r\n    let results = []\r\n    return this.backendSrv.datasourceRequest({\r\n      url: this.url + '/api/v1/alerts?silenced=false&inhibited=false&filter='+query,\r\n      method: 'GET'\r\n    }).then(response => {\r\n      response.data.data.forEach(value => {\r\n        if(matchedFunction.type === 'key'){\r\n            value = value[matchedFunction.matches[1]];\r\n        }else if (matchedFunction.type === 'names') {\r\n            value = Object.keys(value[matchedFunction.matches[1] + 's'])\r\n        }else if (matchedFunction.type === 'values') {\r\n            value = value[matchedFunction.matches[1] + 's'][matchedFunction.matches[3]];\r\n        }\r\n        _.castArray(value).forEach( v => {\r\n            if(v) {\r\n                if(typeof v === 'object'){\r\n                    v=JSON.stringify(v);\r\n                }\r\n                if (!unique.has(v)) {\r\n                    unique.add(v)\r\n                    results.push({text: v})\r\n                }\r\n            }\r\n        })\r\n      })\r\n      return results;\r\n    });\r\n  }\r\n  query(options) {\r\n    let query = this.buildQueryParameters(options);\r\n    query.targets = query.targets.filter(t => !t.hide);\r\n    if (query.targets.length <= 0) {\r\n      return this.q.when({data: []});\r\n    }\r\n    let filter = encodeURIComponent(this.templateSrv.replace(query.targets[0].expr, options.scopedVars, this.interpolateQueryExpr) || \"\");\r\n    // Format data for table panel\r\n    if(query.targets[0].type === \"table\"){\r\n      var labelSelector = this.parseLabelSelector(query.targets[0].labelSelector);\r\n      return this.backendSrv.datasourceRequest({\r\n        url: this.url + '/api/v1/alerts?silenced=false&inhibited=false&filter='+filter,\r\n        method: 'GET',\r\n      }).then(response => {\r\n        let results = {\r\n          \"data\": [{\r\n            \"rows\": [],\r\n            \"columns\": [],\r\n            \"type\": \"table\"\r\n          }]\r\n        };\r\n\r\n        if(response.data && response.data.data && response.data.data.length) {\r\n          let columnsDict = this.getColumnsDict(response.data.data, labelSelector);\r\n          results.data[0].columns = this.getColumns(columnsDict);\r\n\r\n          for (let i = 0; i < response.data.data.length; i++) {\r\n            let row = new Array(results.data[0].columns.length).fill(\"\");\r\n            let item = response.data.data[i];\r\n            row[0] = Date.parse(item['startsAt']);\r\n\r\n            for (let label of Object.keys(item['labels'])) {\r\n              if(label in columnsDict) {\r\n                if(label === 'severity') {\r\n                  row[columnsDict[label]] = this.severityLevels[item['labels'][label]]\r\n                } else {\r\n                  row[columnsDict[label]] = item['labels'][label];\r\n                }\r\n              }\r\n            }\r\n            for (let annotation of Object.keys(item['annotations'])) {\r\n              if(annotation in columnsDict) {\r\n                row[columnsDict[annotation]] = item['annotations'][annotation];\r\n              }\r\n            }\r\n            if(!!query.targets[0].transform){\r\n                let rules = query.targets[0].transform.split(\"\\n\");\r\n                rules.forEach(function(rulesItem){\r\n                    let rule = rulesItem.split(\"|\");\r\n                    if(!!rule && rule.length>0){\r\n                      row.forEach(function(s, i){\r\n                        row[i]=String(s).replace(new RegExp(rule[0],rule[2]),rule[1]);\r\n                      });\r\n                    }\r\n                });\r\n            }\r\n            results.data[0].rows.push(row);\r\n          }\r\n        }\r\n        return results;\r\n      });\r\n    } else {\r\n      return this.backendSrv.datasourceRequest({\r\n        url: this.url + '/api/v1/alerts?silenced=false&inhibited=false&filter='+filter,\r\n        method: 'GET',\r\n      }).then(response => {\r\n        return {\r\n          \"data\": [{ \"datapoints\": [ [response.data.data.length, Date.now()] ]}]\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  interpolateQueryExpr(value, variable, defaultFormatFn) {\r\n    if (typeof value === 'string') {\r\n      return dsSpecialRegexEscape(value);\r\n    }\r\n\r\n    let escapedValues = _.map(value, dsSpecialRegexEscape);\r\n    return escapedValues.join('|');\r\n  }\r\n\r\n  getColumns(columnsDict) {\r\n    let columns =  [{ text: \"time\", type: \"string\" }];\r\n    for(let column of Object.keys(columnsDict)) {\r\n      columns.push({ text: column, type: \"string\" })\r\n    }\r\n    return columns;\r\n  }\r\n\r\n  // Parses the label list into a map\r\n  parseLabelSelector(input) {\r\n    var map;\r\n    if (typeof(input) === \"undefined\" || input.trim().length === 0) {\r\n      map = [\"*\"];\r\n    } else {\r\n      map = input.trim().split(/\\s*,\\s*/);\r\n    }\r\n    return map;\r\n  }\r\n\r\n  // Creates a column index dictionary in to assist in data row construction\r\n  getColumnsDict(data, labelSelector) {\r\n    let index = 1; // 0 is the data column\r\n    let columnsDict = {};\r\n    let severityDefined = false;\r\n    for (let i = 0; i < data.length; i++) {\r\n      for (let labelIndex = 0; labelIndex < labelSelector.length; labelIndex++) {\r\n        var selectedLabel = labelSelector[labelIndex];\r\n        if (selectedLabel === \"*\") {\r\n          // '*' maps to all labels/annotations not already added via the label selector list\r\n          for (let label of Object.keys(data[i]['labels'])) {\r\n            if(!(label in columnsDict)) {\r\n              if (label === 'severity') {\r\n                severityDefined = true\r\n              }\r\n              columnsDict[label] = index++;\r\n            }\r\n          }\r\n          for (let annotation of Object.keys(data[i]['annotations'])) {\r\n            if(!(annotation in columnsDict)) {\r\n              columnsDict[annotation] = index++;\r\n            }\r\n          }\r\n        } else if (!(selectedLabel in columnsDict)) {\r\n          if (selectedLabel === 'severity') {\r\n            severityDefined = true\r\n          }\r\n          columnsDict[selectedLabel] = index++;\r\n        }\r\n      }\r\n    }\r\n    if (!severityDefined) {\r\n      columnsDict['severity'] = index++;\r\n    }\r\n    return columnsDict;\r\n  }\r\n\r\n  testDatasource() {\r\n    return this.backendSrv.datasourceRequest({\r\n      url: this.url + '/api/v1/status',\r\n      method: 'GET'\r\n    }).then(response => {\r\n      if (response.status === 200) {\r\n        return { status: \"success\", message: \"Data source is working\", title: \"Success\" };\r\n      }\r\n    });\r\n  }\r\n\r\n  buildQueryParameters(options) {\r\n    //remove placeholder targets\r\n    options.targets = _.filter(options.targets, target => {\r\n      return target.target !== 'select metric';\r\n    });\r\n\r\n    options.targetss = _.map(options.targets, target => {\r\n      return {\r\n        target: this.templateSrv.replace(target.target),\r\n        expr: target.expr,\r\n        refId: target.refId,\r\n        hide: target.hide,\r\n        type: target.type || 'single',\r\n        legendFormat: target.legendFormat || \"\",\r\n        transform: target.transform || \"\"\r\n      };\r\n    });\r\n    return options;\r\n  }\r\n\r\n  formatInstanceText(labels, legendFormat){\r\n    if(legendFormat === \"\"){\r\n      return JSON.stringify(labels);\r\n    }\r\n    let aliasRegex = /\\{\\{\\s*(.+?)\\s*\\}\\}/g;\r\n    return legendFormat.replace(aliasRegex, function(match, g1) {\r\n      if (labels[g1]) {\r\n        return labels[g1];\r\n      }\r\n      return \"\";\r\n    });\r\n  }\r\n\r\n\r\n}\r\nexport function dsRegularEscape(value) {\r\n  if (typeof value === 'string') {\r\n    return value.replace(/'/g, \"\\\\\\\\'\");\r\n  }\r\n  return value;\r\n}\r\n\r\nexport function dsSpecialRegexEscape(value) {\r\n  if (typeof value === 'string') {\r\n    return dsRegularEscape(value.replace(/\\\\/g, '\\\\\\\\\\\\\\\\').replace(/[$^*{}\\[\\]+?.()]/g, '\\\\\\\\$&'));\r\n  }\r\n  return value;\r\n}\r\n"]}